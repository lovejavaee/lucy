/* lcsocket.h generated by valac 0.20.1, the Vala compiler, do not modify */


#ifndef __LCSOCKET_H__
#define __LCSOCKET_H__

#include <glib.h>
#include <gio/gio.h>
#include <stdlib.h>
#include <string.h>

G_BEGIN_DECLS
#define TYPE_LC_SOCKET (lc_socket_get_type ())
#define LC_SOCKET(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_LC_SOCKET, LcSocket))
#define LC_SOCKET_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_LC_SOCKET, LcSocketClass))
#define IS_LC_SOCKET(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_LC_SOCKET))
#define IS_LC_SOCKET_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_LC_SOCKET))
#define LC_SOCKET_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_LC_SOCKET, LcSocketClass))
typedef struct _LcSocket LcSocket;
typedef struct _LcSocketClass LcSocketClass;
typedef struct _LcSocketPrivate LcSocketPrivate;

struct _LcSocket {
    GSocket parent_instance;
    LcSocketPrivate *priv;
};

struct _LcSocketClass {
    GSocketClass parent_class;
};


GType lc_socket_get_type(void) G_GNUC_CONST;
LcSocket *lc_socket_new(const gchar * addr, guint16 port);
LcSocket *lc_socket_construct(GType object_type, const gchar * addr,
                              guint16 port);

/*
 * 发起链接
 */
void lc_socket_connect_async(LcSocket * socket,
                             GAsyncReadyCallback callback,
                             gpointer user_data);
gboolean lc_socket_connect_finish(GAsyncResult * res);

/*
 * 发送/接收数据
 */
gssize lc_socket_send(LcSocket * socket, const gchar * buffer, gsize size);
gssize lc_socket_receive(LcSocket * socket, gchar * buffer, gsize size);
/* 读取一行 */
gssize lc_socket_receive_line(LcSocket * socket, gchar * buffer,
                              gsize size);

/*
 * 该函数会发送一个协议请求，
 * 然后等待响应，直到接受到了完整的响应（一个空行结束）才回调
 */
void lc_socket_send_command_async(LcSocket * socket,
                                  const gchar * command,
                                  GAsyncReadyCallback callback,
                                  gpointer user_data);
/*
 * 正常则返回响应的数据，否则返回NULL。返回的数据需要手动释放
 */
gchar *lc_socket_send_command_finish(GAsyncResult * result);

G_END_DECLS
#endif
