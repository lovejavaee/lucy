/* lcsocket.h generated by valac 0.20.1, the Vala compiler, do not modify */


#ifndef __LCSOCKET_H__
#define __LCSOCKET_H__

#include <glib.h>
#include <gio/gio.h>
#include <stdlib.h>
#include <string.h>

#define ADB_FORWARD_LOCAL   (37859)
#define ADB_FORWARD_REMOTE  (37859)

G_BEGIN_DECLS
#define TYPE_LC_SOCKET (lc_socket_get_type ())
#define LC_SOCKET(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_LC_SOCKET, LcSocket))
#define LC_SOCKET_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_LC_SOCKET, LcSocketClass))
#define IS_LC_SOCKET(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_LC_SOCKET))
#define IS_LC_SOCKET_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_LC_SOCKET))
#define LC_SOCKET_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_LC_SOCKET, LcSocketClass))
typedef struct _LcSocket LcSocket;
typedef struct _LcSocketClass LcSocketClass;
typedef struct _LcSocketPrivate LcSocketPrivate;

struct _LcSocket {
    GSocket parent_instance;
    LcSocketPrivate *priv;
};

struct _LcSocketClass {
    GSocketClass parent_class;
};


GType lc_socket_get_type(void) G_GNUC_CONST;
LcSocket *lc_socket_new(const gchar * addr, guint16 port);
LcSocket *lc_socket_construct(GType object_type, const gchar * addr,
                              guint16 port);

void lc_socket_close(LcSocket * socket);

/* convert a 4-byte string that represents a HEX number to integer */
gssize lc_data_length(gchar buf[4]);

/*
 * asynchronously connect connection
 */
void lc_socket_connect_async(LcSocket * socket,
                             GAsyncReadyCallback callback,
                             gpointer user_data);
/* get the result of lc_socket_connect_async call */
gboolean lc_socket_connect_async_finish(GAsyncResult * res);

/*
 * wrapper for g_socket_[send,receive]
 */
gssize lc_socket_send(LcSocket * socket, const gchar * buffer, gsize size);
gssize lc_socket_receive(LcSocket * socket, gchar * buffer, gsize size);

/*
 * send a command to lily asynchronously
 */
void lc_socket_send_command_async(LcSocket * socket,
                                  const gchar * command,
                                  GAsyncReadyCallback callback,
                                  gpointer user_data);
/*
 * get the result of lc_socket_send_command_async call
 */
GByteArray *lc_socket_send_command_async_finish(GAsyncResult * result);


void lc_socket_set_busy(LcSocket * socket, gboolean busy);
gboolean lc_socket_is_busy(LcSocket * socket);
#define lc_socket_is_closed(socket) g_socket_is_closed (G_SOCKET(socket))
#define lc_socket_is_connected(socket) g_socket_is_connected (G_SOCKET(socket))

G_END_DECLS
#endif
