/* amlapplicationview.h generated by valac 0.20.1, the Vala compiler, do not modify */


#ifndef __AMLAPPLICATIONVIEW_H__
#define __AMLAPPLICATIONVIEW_H__

#include <glib.h>
#include <gtk/gtk.h>
#include "amlprotocol.h"

G_BEGIN_DECLS
#define TYPE_AML_APPLICATION_VIEW (aml_application_view_get_type ())
#define AML_APPLICATION_VIEW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_AML_APPLICATION_VIEW, AmlApplicationView))
#define AML_APPLICATION_VIEW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_AML_APPLICATION_VIEW, AmlApplicationViewClass))
#define IS_AML_APPLICATION_VIEW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_AML_APPLICATION_VIEW))
#define IS_AML_APPLICATION_VIEW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_AML_APPLICATION_VIEW))
#define AML_APPLICATION_VIEW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_AML_APPLICATION_VIEW, AmlApplicationViewClass))
typedef struct _AmlApplicationView AmlApplicationView;
typedef struct _AmlApplicationViewClass AmlApplicationViewClass;
typedef struct _AmlApplicationViewPrivate AmlApplicationViewPrivate;

struct _AmlApplicationView {
    GtkScrolledWindow parent_instance;
    AmlApplicationViewPrivate *priv;
};

struct _AmlApplicationViewClass {
    GtkScrolledWindowClass parent_class;
};


GType aml_application_view_get_type(void) G_GNUC_CONST;
AmlApplicationView *aml_application_view_new(void);
AmlApplicationView *aml_application_view_construct(GType object_type);

/*
 * 彻底更新应用列表，该函数保证显示内容与list一致，不多不少
 */
void aml_application_view_update(AmlApplicationView * self, GList * list);

/*
 * 在应用列表中增加一项，不会检查是否重复
 */
void aml_application_view_append(AmlApplicationView * self,
                                 AmlProtocolApplication * data);


G_END_DECLS
#endif
